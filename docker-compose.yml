services:
  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
  
  # Service Registry
  eureka-server:
    build: 
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports: 
      - 8761:8761
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
    networks:
      - microservices-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    
  # Redis
  redis:
    image: redis:7-alpine
    container_name: redis
    ports: 
      - "${REDIS_LOCAL_PORT}:${REDIS_DOCKER_PORT}"
    volumes:
      - redis-data:/data
    networks:
      - microservices-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build: 
      context: ./agrictrades-apigateway
      dockerfile: Dockerfile
    container_name: api-gateway
    ports: 
      - 8080:8080
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - SERVER_PORT_GATEWAY=8080
      - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Identity Service
  identity-service:
    build: 
      context: .
      dockerfile: agrictrades-identity/Dockerfile
    container_name: identity-service
    ports: 
      - 8086:8086
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - SERVER_PORT_IDENTITY=8086
      - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
      - SPRING_DATASOURCE_URL=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE_IDENTITY}
      - SPRING_DATASOURCE_USERNAME=${MYSQLDB_USER}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=${MYSQL_DRIVER:-com.mysql.cj.jdbc.Driver}
      - SPRING_RABBITMQ_HOST=${RABBITMQ_HOST}
      - SPRING_RABBITMQ_PORT=${RABBITMQ_PORT}
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8086/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    restart: unless-stopped
  
    # Ecommerce Service
  ecommerce-service:
    build: 
      context: .
      dockerfile: agrictrades-ecommerce/Dockerfile
    container_name: ecommerce-service
    ports: 
      - 8083:8083
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE:-dev}
      - SERVER_PORT_COMMERCE=8083
      - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
      - SPRING_DATASOURCE_URL=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE_COMMERCE}
      - SPRING_DATASOURCE_USERNAME=${MYSQLDB_USER}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=${MYSQL_DRIVER:-com.mysql.cj.jdbc.Driver}
      - SPRING_RABBITMQ_HOST=${RABBITMQ_HOST}
      - SPRING_RABBITMQ_PORT=${RABBITMQ_PORT}
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8083/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Notification Service
  notification-service:
    build: 
      context: ./agrictrades-notification
      dockerfile: Dockerfile
    container_name: notification-service
    ports: 
      - 8082:8082
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - SERVER_PORT_NOTIFICATION=8082
      - SERVER_PORT_COMMERCE=8083
      - EUREKA_SERVER_URL=${EUREKA_SERVER_URL}
      - SPRING_REDIS_HOST=${REDIS_URL}
      - SPRING_REDIS_PORT=${REDIS_DOCKER_PORT}
      - SPRING_DATASOURCE_URL=jdbc:mysql://${MYSQL_HOST}:${MYSQL_PORT}/${MYSQL_DATABASE_NOTIFICATION}
      - SPRING_DATASOURCE_USERNAME=${MYSQLDB_USER}
      - SPRING_DATASOURCE_PASSWORD=${MYSQL_PASSWORD}
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=${MYSQL_DRIVER:-com.mysql.cj.jdbc.Driver}
      - SPRING_RABBITMQ_HOST=${RABBITMQ_HOST}
      - SPRING_RABBITMQ_PORT=${RABBITMQ_PORT}
      - SPRING_RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - SPRING_RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
    networks:
      - microservices-network
    depends_on:
      eureka-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 40s
    restart: unless-stopped

networks:
  microservices-network:
    driver: bridge

volumes:
  redis-data:
    driver: local
  rabbitmq-data:  
    driver: local
